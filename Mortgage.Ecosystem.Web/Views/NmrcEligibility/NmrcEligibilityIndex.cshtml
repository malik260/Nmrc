@{
    Layout = "~/Views/Shared/_Index.cshtml";
}
<div class="ibox-title">
    <h5>ELIGIBILITY CRITERIA SETUP</h5>
</div>
<div class="container-div">
    <div class="row">
        <div id="searchDiv" class="col-sm-12 search-collapse">
            <div class="select-list">
                <ul>
                    <li>
                        <label>Criteria: </label> <input id="item" col="Item" type="text" />
                    </li>
                    <li>
                        <a id="btnSearch" class="btn btn-primary btn-sm" onclick="searchGrid()"><i class="fa fa-search"></i>&nbsp;Search</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="btn-group-sm" id="toolbar">
            <a id="btnAdd" class="btn btn-success" onclick="showSaveForm(true)"><i class="fa fa-plus"></i> Add</a>
             <a id="btnEdit" class="btn btn-primary disabled" onclick="showSaveForm(false)"><i class="fa fa-edit"></i> Edit</a>
            <a id="btnDelete" class="btn btn-danger disabled" onclick="deleteForm()"><i class="fa fa-remove"></i> Delete</a>
        </div>

        <div class="col-sm-12 select-table table-striped">
            <table id="gridTable" data-mobile-responsive="true"></table>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<script type="text/javascript">
    $(function () {
        initGrid();

        $("#status").cnComboBox({ data: cn.getJson(@Html.Raw(typeof(StatusEnum).EnumToDictionaryString())) });

        laydate.render({ elem: '#startTime', format: 'yyyy-MM-dd' });
        laydate.render({ elem: '#endTime', format: 'yyyy-MM-dd' });
    });

    function initGrid() {
        var queryUrl = '@Url.Content("~/NmrcEligibility/GetNmrcEligibilityCriteriaPageListJson")';
        $('#gridTable').cnTable({
            url: queryUrl,
            columns: [
                { checkbox: true, visible: true },

                { field: 'Id', title: 'Id', visible: false },
                { field: 'CategoryName', title: 'Category', sortable: false },
                { field: 'Item', title: 'Criteria', sortable: false },
                { field: 'Description', title: 'Description', sortable: false },

            ],
            queryParams: function (params) {
                var pagination = $('#gridTable').cnTable('getPagination', params);
                var queryString = $("#searchDiv").getWebControls(pagination);
                return queryString;
            }
        });
    }

    function searchGrid(callBackId) {
        var param = $("#searchDiv").getWebControls();
        $('#gridTable').cnTreeTable('search', param);
        if (callBackId) {
            id = callBackId;
        }
    }

    function searchGrid() {
        $('#gridTable').cnTable('search');
        resetToolbarStatus();
    }

    //function showSaveForm() {
    //    var id = 0;
    //    var confirmButtonText = "Add";
    //    cn.openDialog({
    //        title: "Credit Assessment Factor Index Form",
    //        content: '@Url.Content("~/CreditAssessmentFactorIndex/CreditAssessmentFactorIndexForm")' + '?id=' + id,
    //        width: "780px",
    //        btn: [confirmButtonText, 'Cancel'],

    //        callback: function (index, layero) {
    //            var iframeWin = window[layero.find('iframe')[0]['name']];
    //            iframeWin.saveForm(index);
    //        }
    //    });
    //}

    //function showEditForm() {
    //    var selectedRow = $("#gridTable").bootstrapTable("getSelections");
    //    if (!cn.checkRowEdit(selectedRow)) {
    //        return;
    //    }
    //    var id = selectedRow[0].Id;

    //    cn.openDialog({
    //        title: "Edit Credit Assessment Factor Index Form",
    //        content: '@Url.Content("~/CreditAssessmentFactorIndex/CreditAssessmentFactorIndexEditForm")' + '?id=' + id,
    //        width: "780px",
    //        btn: ['Update', 'Cancel'],
    //        callback: function (index, layero) {
    //            var iframeWin = window[layero.find('iframe')[0]['name']];
    //            iframeWin.saveForm(index);
    //        }
    //    });
    //}

    function showSaveForm(bAdd) {
        var id = 0;
        if (!bAdd) {
            var selectedRow = $("#gridTable").bootstrapTable("getSelections");
            if (!cn.checkRowEdit(selectedRow)) {
                return;
            }
            else {
                id = selectedRow[0].Id;
            }
        }
        cn.openDialog({
            title: id > 0 ? "Edit Eligibility Criteria" : "Add Eligibility Criteria",
            content: '@Url.Content("~/NmrcEligibility/NmrcEligibilityForm")' + '?id=' + id,
            width: "780px",
            callback: function (index, layero) {
                var iframeWin = window[layero.find('iframe')[0]['name']];
                iframeWin.saveForm(index);
            }
        });
    }



    function deleteForm(index) {
        var selectedRow = $("#gridTable").bootstrapTable("getSelections");
        if (cn.checkRowDelete(selectedRow)) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Confirm to delete the selected " + selectedRow.length + " row(s) data?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    var ids = cn.getIds(selectedRow);

                    cn.ajax({
                        url: '@Url.Content("~/NmrcEligibility/DeleteFormJson")' + '?ids=' + ids,
                        type: "post",
                        success: function (obj) {
                            if (obj.Tag == 1) {
                                cn.msgSuccess(obj.Message);
                                Swal.fire(
                                    'Deleted!',
                                    'The selected row(s) has been deleted.',
                                    'success'
                                ).then(() => {
                                    // Refresh the grid after confirmation
                                    searchGrid();
                                    location.reload(true);

                                });
                            } else {
                                cn.msgError(obj.Message);
                                Swal.fire(
                                    'Error!',
                                    'There was an error deleting the row(s).',
                                    'error'
                                );
                            }
                        },
                        complete: function () {
                            // Ensure the processing overlay is closed after the AJAX request completes
                            Swal.close();
                        }
                    });
                }
            });
        }
    }

</script>