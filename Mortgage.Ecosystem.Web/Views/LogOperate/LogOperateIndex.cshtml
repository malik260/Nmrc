@{
    Layout = "~/Views/Shared/_Index.cshtml";
}
<div class="container-div">
    <div class="row">
        @*  <div id="searchDiv" class="col-sm-12 search-collapse">
        <div class="select-list">
        <ul>
        <li>
        Company name: <input id="userName" col="UserName" type="text" />
        </li>
        <li>
        Operation method: <input id="executeUrl" col="ExecuteUrl" type="text" />
        </li>

        <li>
        <a id="btnSearch" class="btn btn-primary btn-sm" onclick="searchGrid()"><i class="fa fa-search"></i>&nbsp;search</a>
        </li>
        </ul>
        </div>
        </div>*@
        <div class="btn-group-sm" id="toolbar">
            <a id="btnDelete" class="btn btn-danger disabled" onclick="deleteForm()"><i class="fa fa-remove"></i> delete</a>
            <a id="btnDelete" class="btn btn-danger" onclick="removeAllForm()"><i class="fa fa-trash"></i> Clear</a>
        </div>

        <div class="col-sm-12 select-table table-striped">
            <table id="gridTable" data-mobile-responsive="true"></table>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        initGrid();

        $("#logStatus").cnComboBox({ data: cn.getJson(@Html.Raw(typeof(OperateStatusEnum).EnumToDictionaryString())) });

        laydate.render({ elem: '#startTime', format: 'yyyy-MM-dd' });
        laydate.render({ elem: '#endTime', format: 'yyyy-MM-dd' });
    });

    function initGrid() {
        var queryUrl = '@Url.Content("~/LogOperate/GetPageListJson")';
        $('#gridTable').cnTable({
            url: queryUrl,
            columns: [
                { checkbox: true, visible: true },
                { field: 'Id', title: 'Id', visible: false },
                { field: 'UserName', title: 'Company Name' },
                // { field: 'DepartmentName', title: 'Department Name' },
                { field: 'IpAddress', title: 'IpAddress' },
                { field: 'ExecuteUrl', title: 'Operation method' },
                { field: 'ExecuteTime', title: 'Time-consuming (ms)' },
                //{
                //    field: 'LogStatus', title: 'Operation Status', align: 'center',
                //    formatter: function (value, row, index) {
                //        if (value == "@OperateStatusEnum.Success.ToInt()") {
                //            return '<span class="badge badge-primary">' + "@OperateStatusEnum.Success.GetDescription()" + '</span>';
                //        } else {
                //            return '<span class="badge badge-warning">' + "@OperateStatusEnum.Fail.GetDescription()" + '</span>';
                //        }
                //    }
                //},
                {
                    field: 'BaseCreateTime', title: 'Operation time', formatter: function (value, row, index) {
                        return cn.formatDate(value, "yyyy-MM-dd HH:mm:ss");
                    }
                },
                {
                    title: 'Operation',
                    align: 'center',
                    formatter: function (value, row, index) {
                        var actions = [];
                        actions.push('<a class="btn btn-warning btn-xs" href="#" onclick="showDetailForm(\'' + row.Id + '\')"><i class="fa fa- search"></i>Details</a>');
                        return actions.join('');
                    }
                }
            ],
            queryParams: function (params) {
                var pagination = $('#gridTable').cnTable('getPagination', params);
                var queryString = $("#searchDiv").getWebControls(pagination);
                return queryString;
            }
        });
    }

    //function searchGrid(callBackId) {
    //    var param = $("#searchDiv").getWebControls();
    //    $('#gridTable').cnTreeTable('search', param);
    //    if (callBackId) {
    //        id = callBackId;
    //    }
    //}

    //function searchGrid() {
    //    $('#gridTable').cnTable('search');
    //    resetToolbarStatus();
    //}

    function deleteForm() {
        var selectedRow = $("#gridTable").bootstrapTable("getSelections");
        if (cn.checkRowDelete(selectedRow)) {
            cn.confirm("Confirm to delete the selected " + selectedRow.length + " row data?", function () {
                var ids = cn.getIds(selectedRow);
                cn.ajax({
                    url: '@Url.Content("~/LogOperate/DeleteFormJson")' + '?ids=' + ids,
                    type: "post",
                    success: function (obj) {
                        if (obj.Tag == 1) {
                            cn.msgSuccess(obj.Message);
                            searchGrid();
                        }
                        else {
                            cn.msgError(obj.Message);
                        }
                    }
                });
            });
        }
    }

    function removeAllForm() {
        cn.confirm("Are you sure you want to clear the table?", function () {
            cn.ajax({
                url: '@Url.Content("~/LogOperate/RemoveAllFormJson")',
                type: "post",
                success: function (obj) {
                    if (obj.Tag == 1) {
                        cn.msgSuccess(obj.Message);
                        searchGrid();
                    }
                    else {
                        cn.msgError(obj.Message);
                    }
                }
            });
        });
    }

    function showDetailForm(id) {
        cn.openDialog({
            title: "Detailed operation log",
            content: '@Url.Content("~/LogOperate/LogOperateDetail")' + '?id=' + id
        });
    }
</script>